(concat [0 0] [1 1 1] [0 0])
(partition (0 0 1 1 1 0 0)
3 1)
(partition (0 0 1 1 1 0 0) 3 1)
(partition  3 1 (0 0 1 1 1 0 0) )
(partition 3 1 '(0 0 1 1 1 0 0))
(def rule-30 {[1 1 1] 0
                   [1 1 0] 0
                   [1 0 1] 0
                   [1 0 0] 1
                   [0 1 1] 1
                   [0 1 0] 1
                   [0 0 1] 1
                   [0 0 0] 0})
(rule-30 '(0 0 1))
(map rule-30 (partition 3 1 '(0 0 1 1 1 0 0)))
(map rule-30 (partition 3 1 (concat [0 0] [1 1 1] [0 0])))
(repeat 3 \space)
(apply str (repeat 3 \space))
(str (apply str (repeat 3 \space)) "koko")
(map-indexed #(vector %1 %2) [[1] [1 1 1]])
(map-indexed #(vector 3 %1 %2) [[1] [1 1 1]])
